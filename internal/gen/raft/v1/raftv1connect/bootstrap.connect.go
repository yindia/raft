// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: raft/v1/bootstrap.proto

package raftv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	v1 "raft/internal/gen/raft/v1"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// BootstrapServiceName is the fully-qualified name of the BootstrapService service.
	BootstrapServiceName = "raft.v1.BootstrapService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// BootstrapServiceAddReplicaProcedure is the fully-qualified name of the BootstrapService's
	// AddReplica RPC.
	BootstrapServiceAddReplicaProcedure = "/raft.v1.BootstrapService/AddReplica"
)

// BootstrapServiceClient is a client for the raft.v1.BootstrapService service.
type BootstrapServiceClient interface {
	// Adds a new replica to the Raft cluster.
	AddReplica(context.Context, *connect.Request[v1.AddrInfo]) (*connect.Response[v1.AddrInfoStatus], error)
}

// NewBootstrapServiceClient constructs a client for the raft.v1.BootstrapService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewBootstrapServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) BootstrapServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &bootstrapServiceClient{
		addReplica: connect.NewClient[v1.AddrInfo, v1.AddrInfoStatus](
			httpClient,
			baseURL+BootstrapServiceAddReplicaProcedure,
			opts...,
		),
	}
}

// bootstrapServiceClient implements BootstrapServiceClient.
type bootstrapServiceClient struct {
	addReplica *connect.Client[v1.AddrInfo, v1.AddrInfoStatus]
}

// AddReplica calls raft.v1.BootstrapService.AddReplica.
func (c *bootstrapServiceClient) AddReplica(ctx context.Context, req *connect.Request[v1.AddrInfo]) (*connect.Response[v1.AddrInfoStatus], error) {
	return c.addReplica.CallUnary(ctx, req)
}

// BootstrapServiceHandler is an implementation of the raft.v1.BootstrapService service.
type BootstrapServiceHandler interface {
	// Adds a new replica to the Raft cluster.
	AddReplica(context.Context, *connect.Request[v1.AddrInfo]) (*connect.Response[v1.AddrInfoStatus], error)
}

// NewBootstrapServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewBootstrapServiceHandler(svc BootstrapServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	bootstrapServiceAddReplicaHandler := connect.NewUnaryHandler(
		BootstrapServiceAddReplicaProcedure,
		svc.AddReplica,
		opts...,
	)
	return "/raft.v1.BootstrapService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case BootstrapServiceAddReplicaProcedure:
			bootstrapServiceAddReplicaHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedBootstrapServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedBootstrapServiceHandler struct{}

func (UnimplementedBootstrapServiceHandler) AddReplica(context.Context, *connect.Request[v1.AddrInfo]) (*connect.Response[v1.AddrInfoStatus], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("raft.v1.BootstrapService.AddReplica is not implemented"))
}
