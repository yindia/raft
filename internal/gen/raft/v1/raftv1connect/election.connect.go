// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: raft/v1/election.proto

package raftv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	v1 "raft/internal/gen/raft/v1"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// ElectionServiceName is the fully-qualified name of the ElectionService service.
	ElectionServiceName = "raft.v1.ElectionService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ElectionServiceVotingProcedure is the fully-qualified name of the ElectionService's Voting RPC.
	ElectionServiceVotingProcedure = "/raft.v1.ElectionService/Voting"
)

// ElectionServiceClient is a client for the raft.v1.ElectionService service.
type ElectionServiceClient interface {
	// Voting handles vote requests from candidates.
	Voting(context.Context, *connect.Request[v1.VoteRequest]) (*connect.Response[v1.VoteResponse], error)
}

// NewElectionServiceClient constructs a client for the raft.v1.ElectionService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewElectionServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ElectionServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &electionServiceClient{
		voting: connect.NewClient[v1.VoteRequest, v1.VoteResponse](
			httpClient,
			baseURL+ElectionServiceVotingProcedure,
			opts...,
		),
	}
}

// electionServiceClient implements ElectionServiceClient.
type electionServiceClient struct {
	voting *connect.Client[v1.VoteRequest, v1.VoteResponse]
}

// Voting calls raft.v1.ElectionService.Voting.
func (c *electionServiceClient) Voting(ctx context.Context, req *connect.Request[v1.VoteRequest]) (*connect.Response[v1.VoteResponse], error) {
	return c.voting.CallUnary(ctx, req)
}

// ElectionServiceHandler is an implementation of the raft.v1.ElectionService service.
type ElectionServiceHandler interface {
	// Voting handles vote requests from candidates.
	Voting(context.Context, *connect.Request[v1.VoteRequest]) (*connect.Response[v1.VoteResponse], error)
}

// NewElectionServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewElectionServiceHandler(svc ElectionServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	electionServiceVotingHandler := connect.NewUnaryHandler(
		ElectionServiceVotingProcedure,
		svc.Voting,
		opts...,
	)
	return "/raft.v1.ElectionService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ElectionServiceVotingProcedure:
			electionServiceVotingHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedElectionServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedElectionServiceHandler struct{}

func (UnimplementedElectionServiceHandler) Voting(context.Context, *connect.Request[v1.VoteRequest]) (*connect.Response[v1.VoteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("raft.v1.ElectionService.Voting is not implemented"))
}
